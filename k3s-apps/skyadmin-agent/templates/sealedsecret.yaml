apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: skyadmin-agent-secrets
  namespace: skyadmin-agent
spec:
  encryptedData:
    # These values need to be encrypted using kubeseal
    # Replace the placeholder values below with actual encrypted values

    # Main API token for skyadmin-agent
    API_TOKEN: AgBy3i4OJSWK+PiTySYZZA9rO5QtQFcHUmPiAiz... # Replace with encrypted API token

    # MAC address for the agent
    MAC_ADDRESS: AgBy3i4OJSWK+PiTySYZZA9rO5QtQFcHUmPiAiz... # Replace with encrypted MAC address

    # Additional secrets if needed
    # DATABASE_URL: AgBy3i4OJSWK+PiTySYZZA9rO5QtQFcHUmPiAiz... # If database connection is needed
    # ENCRYPTION_KEY: AgBy3i4OJSWK+PiTySYZZA9rO5QtQFcHUmPiAiz... # If encryption is needed

  template:
    metadata:
      name: skyadmin-agent-secrets
      namespace: skyadmin-agent
    type: Opaque

---
# Instructions for encrypting secrets:
#
# 1. Install kubeseal CLI tool:
#    curl -OL "https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/kubeseal-0.24.0-linux-amd64.tar.gz"
#    tar -xvzf kubeseal-0.24.0-linux-amd64.tar.gz kubeseal
#    sudo install -o root -g root -m 0755 kubeseal /usr/local/bin/kubeseal
#
# 2. Ensure sealed-secrets controller is running in your cluster (already configured in your app-of-apps.yaml)
#
# 3. Encrypt each secret value using the exact values from your configuration:
#
#    # For API_TOKEN (replace with your actual API token):
#    echo -n "b2507058a2c145d60c6d919c0347fe9c" | kubeseal --raw --from-file=/dev/stdin --name=skyadmin-agent-secrets --namespace=skyadmin-agent
#
#    # For MAC_ADDRESS (replace with your actual MAC address):
#    echo -n "D4CA6DA65E0E" | kubeseal --raw --from-file=/dev/stdin --name=skyadmin-agent-secrets --namespace=skyadmin-agent
#
# 4. Replace the placeholder values above with the encrypted output from kubeseal
#
# 5. The sealed secret will automatically create a regular Kubernetes secret that your deployment can reference

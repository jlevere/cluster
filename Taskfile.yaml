version: "3"

env:
  ANSIBLE_HOST_KEY_CHECKING: "False"

vars:
  SSH_KEY: ./keys/cluster_key
  PASS_FILE: ./keys/pass
  CRYPT_PASS: ./keys/cryptpass

tasks:
  default:
    desc: List available commands
    cmds:
      - task --list-all

  k3s_deploy_core:
    desc: Setup the core applications in k3s like argocd
    cmds:
      - kubectl create namespace argocd --dry-run=client --output=yaml | kubectl apply -f -

  argo_apps_bootstrap:
    desc: Bootstrap ArgoCD to manage all k3s applications
    silent: true
    cmds:
      - echo "Bootstrapping GitOps for k3s applications..."
      - kubectl apply -f k3s-apps/app-of-apps.yaml
      - echo "ArgoCD will now automatically manage applications defined in app-of-apps.yaml"
      - echo "Monitor progress with kubectl get applications -n argocd"

  argocd_access:
    desc: Setup ArgoCD browser access (port-forward and get password)
    silent: true
    cmds:
      - echo " Setting up ArgoCD browser access..."
      - echo ""
      - echo " ArgoCD Admin Password:"
      - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      - echo ""
      - echo ""
      - echo " Starting port-forward to ArgoCD UI..."
      - echo " Access ArgoCD at http://localhost:8085"
      - echo " Username admin"
      - echo " Password (shown above)"
      - echo ""
      - echo " Press Ctrl+C to stop port-forwarding"
      - kubectl port-forward svc/argocd-server -n argocd 8085:443

  argocd_password:
    desc: Get ArgoCD admin password only
    silent: true
    cmds:
      - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      - echo ""

  kibana_access:
    desc: Setup Kibana browser access (port-forward and get password)
    silent: true
    cmds:
      - echo " Setting up Kibana browser access..."
      - echo ""
      - echo " Elasticsearch elastic user password:"
      - kubectl get secret quickstart-es-elastic-user -n elastic-system -o jsonpath="{.data.elastic}" | base64 -d
      - echo ""
      - echo ""
      - echo " Starting port-forward to Kibana UI..."
      - echo " Access Kibana at https://localhost:5601"
      - echo " Username elastic"
      - echo " Password (shown above)"
      - echo ""
      - echo " Press Ctrl+C to stop port-forwarding"
      - kubectl port-forward service/quickstart-kb-http 5601 -n elastic-system

  elastic_status:
    desc: Check status of Elastic Stack components
    silent: true
    cmds:
      - echo " Elastic Stack Status"
      - kubectl get elasticsearch,kibana,agent -n elastic-system
      - echo ""
      - echo " Services"
      - kubectl get services -n elastic-system
      - echo ""
      - echo " To access Kibana"
      - echo "1. Get the elastic user password"
      - echo "   kubectl get secret quickstart-es-elastic-user -n elastic-system -o jsonpath='{.data.elastic}' | base64 -d"
      - echo "2. Port-forward to Kibana"
      - echo "   kubectl port-forward service/quickstart-kb-http 5601 -n elastic-system"
      - echo "3. Access Kibana at https\//localhost\:5601"
      - echo ""
      - echo " Fleet Server Configuration"
      - echo "External IP for Windows machines"
      - kubectl get service fleet-server -n elastic-system -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null && echo "" || echo "LoadBalancer IP not yet assigned"
      - echo "Expected Fleet Server URL https\//192.168.88.20:8220"
      - echo ""
      - echo " Manual Fleet Server Setup Required"
      - echo "1. Access Kibana → Fleet → Settings"
      - echo "2. Add Fleet Server host https\://192.168.88.20:8220"
      - echo "3. Create agent policies for your Windows machines"
      - echo "4. Use enrollment tokens with https\://192.168.88.20:8220"

  elastic_logs:
    desc: Show logs for Elastic Stack components
    silent: true
    cmds:
      - echo " ECK Operator logs"
      - kubectl logs -l app.kubernetes.io/name=elastic-operator -n elastic-system --tail=50
      - echo ""
      - echo " Elasticsearch logs"
      - kubectl logs -l elasticsearch.k8s.elastic.co/cluster-name=quickstart -n elastic-system --tail=50
      - echo ""
      - echo " Fleet Server logs"
      - kubectl logs -l agent.k8s.elastic.co/name=fleet-server -n elastic-system --tail=50

  pxe_server:
    desc: Run Ansible playbook for PXE server configuration
    deps: [gen_ssh_keys, crypt_pass]
    cmds:
      - ansible-playbook --inventory inventories/cluster.yaml pxe_server.yaml -v

  base_prov:
    desc: Run Ansible playbook for base Debian provisioning
    cmds:
      - ansible-playbook --inventory inventories/cluster.yaml base_debian.yaml -v

  install_k3s:
    desc: Run Ansible playbook for installing K3s
    cmds:
      - ansible-playbook --inventory inventories/cluster.yaml base_k3s.yaml -vv

  kubevirt:
    desc: Run Ansible playbook for Kubevirt setup
    cmds:
      - ansible-playbook --inventory inventories/cluster.yaml kubevirt.yaml

  config_mellanox:
    desc: Run Ansible playbook for config mellanox support
    cmds:
      - ansible-playbook --inventory inventories/cluster.yaml mellanox.yaml -vv

  install_proxmox:
    desc: Run Ansible playbook for installing Proxmox VE
    cmds:
      - ansible-playbook --inventory inventories/cluster.yaml install_proxmox.yaml

  ping:
    desc: Ping all hosts in the cluster
    cmds:
      - ansible cluster -m ping --inventory inventories/cluster.yaml

  shutdown:
    desc: Shutdown machines using Ansible playbook
    cmds:
      - 'echo -n "Shutdown machines? [y/N] " && read ans && [ ${ans:-N} = y ]'
      - ansible-playbook --inventory inventories/cluster.yaml shutdown.yaml -vvv

  gen_ssh_keys:
    desc: Generate SSH keys if they don't exist
    cmds:
      - |
        if [ ! -f "{{.SSH_KEY}}" ]; then
          ssh-keygen -t ed25519 -P '' -f "{{.SSH_KEY}}"
        else
          echo "SSH key already exists. Skipping generation."
        fi

  gen_user_pass:
    desc: Generate user password if it doesn't exist
    cmds:
      - |
        if [ ! -f "{{.PASS_FILE}}" ]; then
          openssl rand -base64 32 | tr -dc 'a-zA-Z0-9' | head -c 16 > {{.PASS_FILE}}
        else
          echo "User password already exists. Skipping generation."
        fi

  crypt_pass:
    desc: Encrypt generated password
    deps: [gen_user_pass]
    cmds:
      - cat {{.PASS_FILE}} | mkpasswd --method=bcrypt-a -R 12 -s > {{.CRYPT_PASS}}

  helm_deps_update:
    desc: Update Helm dependencies for all charts
    cmds:
      - |
        for chart in k3s-apps/*/; do
          if [ -f "$chart/Chart.yaml" ]; then
            echo "Updating dependencies for $chart"
            helm dependency update "$chart"
          fi
        done

  encrypt_secret:
    desc: Encrypt a secret value using kubeseal (Usage task encrypt_secret VALUE=myvalue NAME=secret-name NAMESPACE=default)
    silent: true
    cmds:
      - |
        if [ -z "{{.VALUE}}" ]; then
          echo "Usage task encrypt_secret VALUE=myvalue"
          echo "Example task encrypt_secret VALUE=b2507058a2c145d60c6d919c0347fe9c"
          exit 1
        fi
        echo -n "{{.VALUE}}" | kubeseal --raw --from-file=/dev/stdin --name="skyadmin-agent-secrets" --namespace="skyadmin-agent" --controller-name="sealed-secrets" --controller-namespace="kube-system"
    vars:
      VALUE: '{{.VALUE | default ""}}'

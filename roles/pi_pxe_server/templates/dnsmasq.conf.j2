# Disable DNS Server.
port=0

# Listen only on the specified interface to avoid conflicts
interface={{ pi_pxe_listen_interface | default(ansible_default_ipv4.interface) }}
bind-dynamic
except-interface=lo


# ======== DHCP setup ==========
{% if pi_pxe_server_proxy_dhcp | default(false) %}
# ProxyDHCP mode: another DHCP server hands out IPs; we only provide PXE options
# Define the local subnet in proxy mode so we reply with boot options only
dhcp-range={{ ansible_default_ipv4.network }},proxy,{{ ansible_default_ipv4.netmask }}
{% else %}
# Standalone DHCP mode: this server is authoritative for the subnet
dhcp-authoritative
dhcp-option=1,{{ ansible_default_ipv4.netmask }}
dhcp-option=3,{{ ansible_default_ipv4.gateway }}
dhcp-option=6,{{ (ansible_dns.nameservers | default([])) | first | default('1.1.1.1') }},1.1.1.1

# We're DHCP configuring on this range
dhcp-range={{ ansible_default_ipv4.network | ansible.utils.ipmath(1) }},{{ ansible_default_ipv4.broadcast | ansible.utils.ipmath(-1) }},{{ ansible_default_ipv4.netmask }},12h

{% for host in groups['cluster'] %}
dhcp-host={{ hostvars[host]['mac'] }},{{ hostvars[host]['ansible_host'] }},{{ host }},set:known,30d
{% endfor %}
{% if pi_pxe_server_known_only | default(false) %}
dhcp-ignore=tag:!known
{% endif %}
{% endif %}

# ======== PXE config =============

# Arch detection
dhcp-match=set:bios,option:client-arch,0
dhcp-match=set:efi-x86_64,option:client-arch,7
dhcp-match=set:efi-x86_64,option:client-arch,9
dhcp-match=set:efi-x86_64,option:client-arch,11

# iPXE user class
dhcp-userclass=set:ipxe,iPXE

# Optional PXE prompt to satisfy picky firmwares
pxe-prompt="Network boot",3
pxe-service=tag:bios,0,"Boot from local disk"
pxe-service=tag:efi-x86_64,0,"Boot from local disk"

# BIOS chainload to iPXE
pxe-service=tag:bios,tag:!ipxe,X86PC,"iPXE (BIOS)",undionly.kpxe
dhcp-boot=tag:bios,tag:!ipxe,undionly.kpxe,,{{ pi_pxe_next_server_ip | default(ansible_default_ipv4.address) }}

# UEFI x64 chainload to GRUB (works with Secure Boot)
pxe-service=tag:efi-x86_64,tag:!ipxe,X86-64_EFI,"GRUB (UEFI x64)",grubx64.efi
dhcp-boot=tag:efi-x86_64,tag:!ipxe,grubx64.efi,,{{ pi_pxe_next_server_ip | default(ansible_default_ipv4.address) }}

# Once in iPXE, hand off to HTTP autoexec which does Debian installer
dhcp-boot=tag:ipxe,http://{{ pi_pxe_next_server_ip | default(ansible_default_ipv4.address) }}/autoexec.ipxe

# ========= TFTP config ============

# Enable TFTP server
enable-tftp
tftp-root=/tftp

# Log DHCP queries to stdout
log-queries
log-dhcp
log-facility=-